# Application Configuration
spring.application.name=redis-cache
server.port=8080

# DB Configuration
spring.datasource.url=jdbc:postgresql://ep-shy-flower-a14e45hd-pooler.ap-southeast-1.aws.neon.tech/redis_cache
spring.datasource.username=
spring.datasource.password=
spring.jpa.hibernate.ddl-auto=update

# Caching Config.
spring.cache.type=redis
spring.data.redis.host=localhost
spring.data.redis.port=6379

# Log Config
logging.level.org.springframework.cache=DEBUG
logging.level.org.springframework.data.redis=DEBUG

# Circuit Breaker Config
# Check the last 5 calls and see if more than 50% fail to stop calling the method till 10 seconds and then only allow 3 more request.
resilience4j.circuitbreaker.instances.programmerService.sliding-window-size=5
resilience4j.circuitbreaker.instances.programmerService.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.programmerService.wait-duration-in-open-state=10000
resilience4j.circuitbreaker.instances.programmerService.permitted-number-of-calls-in-half-open-state=3

# Retry Config
# Automatic recalls the failed methods 3 times before giving up and calling fallback.
resilience4j.retry.instances.programmerService.max-attempts=3
resilience4j.retry.instances.programmerService.wait-duration=500ms

# Rate Limiter Config
# Allow only 10 request per second to prevent attacks.
resilience4j.ratelimiter.instances.programmerService.limit-for-period=10
resilience4j.ratelimiter.instances.programmerService.limit-refresh-period=1s

# Bulkhead (Max concurrent call limiter)
resilience4j.bulkhead.instances.programmerService.max-concurrent-calls=5
resilience4j.bulkhead.instances.programmerService.max-wait-duration=0

# Expose all actuator endpoints
management.endpoints.web.exposure.include=*

# Enable Resilience4J metrics
management.metrics.enable.resilience4j.circuitbreaker=true
management.metrics.enable.resilience4j.retry=true
management.metrics.enable.resilience4j.bulkhead=true
management.metrics.enable.resilience4j.ratelimiter=true
